---
description: Maintaining the project structure.
alwaysApply: false
---
# UrekAI-Frontend Project Structure Guide

This document provides comprehensive guidance on the project structure, folder purposes, and file placement rules for the UrekAI-Frontend application.

## 🏗️ **Project Overview**

UrekAI-Frontend is a Next.js 15 application built as an intelligent business analysis platform. It follows a feature-based architecture with clear separation of concerns, type safety, and scalable patterns.

## 📁 **Directory Structure & Rules**

### 1. **Root Directory** (`/`)
**Purpose**: Project configuration and build files only.

**Allowed Files**:
- Configuration: `.eslintrc.json`, `.gitignore`, `next.config.js`, `package.json`, `package-lock.json`, `tsconfig.json`, `postcss.config.js`, `tailwind.config.js`, `vercel.json`
- Documentation: `README.md`
- Environment: `.env.local`, `.env.example`

**❌ Prohibited**: Any source code files, components, or business logic.

---

### 2. **Source Directory** (`src/`)
**Purpose**: All application source code.

**Structure**:
```
src/
├── app/           # Next.js App Router pages and API routes
├── components/    # React components organized by type
├── layouts/       # Layout components and wrappers
├── routes/        # Route constants and path definitions
├── services/      # API clients and business logic
├── state/         # Global state management (Zustand stores)
├── styles/        # Global styles and theme files
├── types/         # TypeScript type definitions
└── utils/         # Utility functions and helpers
```

---

### 3. **App Router** (`src/app/`)
**Purpose**: Next.js App Router pages, layouts, and API routes.

**Structure**:
```
app/
├── (home)/           # Public marketing pages (no auth required)
│   ├── page.tsx      # Landing page
│   ├── about/        # About page
│   ├── docs/         # Documentation
│   ├── help/         # Help center
│   ├── pricing/      # Pricing plans
│   └── solutions/    # Solutions showcase
├── (integrations)/   # Third-party integrations
│   └── shopify/      # Shopify app integration
├── (main)/           # Authenticated user pages
│   ├── chat/         # Main chat interface
│   ├── dashboard/    # Analytics dashboard
│   ├── folders/      # Chat organization
│   ├── insights/     # Business insights
│   ├── profile/      # User profile
│   └── settings/     # App settings
├── api/              # API routes (proxy to backend)
│   ├── auth/         # Authentication endpoints
│   └── chat/         # Chat query endpoints
├── global.css        # Global styles
├── layout.tsx        # Root layout
├── providers.tsx     # Context providers
└── not-found.tsx     # 404 page
```

**Rules**:
- Each route folder must contain a `page.tsx`
- API routes use `route.ts` files
- Route groups use parentheses `(group)` for logical organization
- Global files at root level only

---

### 4. **Feature Components** (`src/components/features/`)
**Purpose**: Feature-specific components that mirror app pages.

**Structure**:
```
features/
├── home/             # Landing page components
│   ├── LandingPage.tsx
│   ├── AboutPage.tsx
│   ├── HelpPage.tsx
│   ├── PricingPage.tsx
│   └── SolutionsPage.tsx
├── main/             # Core app components
│   ├── ChatInterface.tsx
│   ├── Dashboard.tsx
│   ├── FoldersPage.tsx
│   ├── InsightsPage.tsx
│   ├── ProfilePage.tsx
│   └── SettingsPage.tsx
└── solutions/        # Integration components
    ├── SolutionsPage.tsx
    ├── ShopifyService.tsx
    └── WhatsAppService.tsx
```

**Rules**:
- One folder per feature/route group
- Components should be self-contained for their feature
- No shared UI components here
- Mirror the app router structure

---

### 5. **Shared Components** (`src/components/shared/`)
**Purpose**: Reusable components across multiple features.

**Structure**:
```
shared/
├── auth/             # Authentication components
│   ├── AuthModal.tsx
│   └── GoogleAuthDebug.tsx
├── chat/             # Chat-related components
│   ├── ChatArea.tsx
│   ├── ChatSidebar.tsx
│   ├── Message.tsx
│   ├── MessageInput.tsx
│   └── [other chat components]
├── designerui/       # Custom UI components
│   ├── index.ts
│   ├── demo.tsx
│   └── [theme components]
├── BackButton.tsx
├── Footer.tsx
└── Navbar.tsx
```

**Rules**:
- Components used in multiple features
- No page-specific components
- Organize by functionality (auth, chat, etc.)

---

### 6. **UI Components** (`src/components/ui/`)
**Purpose**: Generic, reusable UI primitives.

**Files**:
- `Button.tsx` - Button component
- `Input.tsx` - Input component
- `card.tsx` - Card component
- `badge.tsx` - Badge component
- `select.tsx` - Select component
- `switch.tsx` - Switch component
- `tabs.tsx` - Tabs component
- `label.tsx` - Label component

**Rules**:
- Generic, reusable components only
- No feature-specific logic
- Follow Radix UI patterns
- Use TypeScript interfaces

---

### 7. **Layouts** (`src/layouts/`)
**Purpose**: Layout components and wrappers.

**Files**:
- `GlobalLayout.tsx` - Main app layout
- `ConditionalFooter.tsx` - Conditional footer
- `FolderDescription.md` - Documentation

**Rules**:
- Layout components only
- No pages, state, or services
- Handle responsive design and navigation

---

### 8. **Routes** (`src/routes/`)
**Purpose**: Route constants and path definitions.

**Files**:
- `paths.ts` - Centralized route constants

**Rules**:
- Only route constants
- No components, pages, or services
- Use for navigation consistency

---

### 9. **Services** (`src/services/`)
**Purpose**: API clients and business logic.

**Structure**:
```
services/
├── api/
│   └── index.ts      # API client configuration
└── routes/
    ├── auth.ts       # Authentication API calls
    └── chat.ts       # Chat API calls
```

**Rules**:
- API and business logic only
- No UI or page code
- Separate API clients from endpoint wrappers
- Handle CORS and error management

---

### 10. **State Management** (`src/state/`)
**Purpose**: Global state management using Zustand.

**Files**:
- `authStore.ts` - Authentication state
- `chatStore.ts` - Chat and messages
- `filesStore.ts` - File uploads and attachments
- `foldersStore.ts` - Chat organization
- `archivedChatsStore.ts` - Archived conversations

**Rules**:
- Zustand stores only
- No components, utilities, or pages
- Use persistence for important state
- Handle cross-tab synchronization

---

### 11. **Styles** (`src/styles/`)
**Purpose**: Global styles and theme files.

**Files**:
- `theme.css` - Theme definitions

**Rules**:
- CSS and theme files only
- No components or logic code
- Use CSS custom properties for theming

---

### 12. **Types** (`src/types/`)
**Purpose**: TypeScript type definitions.

**Files**:
- `index.ts` - All type definitions

**Rules**:
- TypeScript interfaces and types only
- No components, pages, or utilities
- Export all types from index.ts

---

### 13. **Utils** (`src/utils/`)
**Purpose**: Utility functions and helpers.

**Structure**:
```
utils/
├── firebase/
│   ├── FirebaseClient.tsx
│   ├── firebaseData.ts
│   └── firebasefiles.ts
├── cn.ts             # Class name utility
└── sessionManager.ts # Session management
```

**Rules**:
- Utility functions and helpers only
- No UI, pages, or state code
- Organize by functionality (firebase, etc.)

---

## 📝 **File Naming Conventions**

### **Pages & Components**
- **Pages**: `page.tsx` (Next.js convention)
- **Feature Components**: `PascalCase.tsx` (e.g., `AboutPage.tsx`)
- **Shared/UI Components**: `PascalCase.tsx` (e.g., `Button.tsx`)
- **Layout Components**: `PascalCase.tsx` (e.g., `GlobalLayout.tsx`)

### **State & Services**
- **Stores**: `camelCase.ts` (e.g., `chatStore.ts`)
- **API Routes**: `route.ts` (Next.js convention)
- **Services**: `camelCase.ts` (e.g., `auth.ts`)

### **Utilities & Types**
- **Utilities**: `camelCase.ts` (e.g., `sessionManager.ts`)
- **Types**: `camelCase.ts` (e.g., `index.ts`)
- **Constants**: `camelCase.ts` (e.g., `paths.ts`)

---

## 🎯 **Key Architectural Principles**

### **1. Separation of Concerns**
- **Pages**: Route handling and page composition
- **Components**: UI logic and presentation
- **Services**: API calls and business logic
- **State**: Data management and persistence
- **Utils**: Helper functions and utilities

### **2. Feature-Based Organization**
- Group related functionality together
- Mirror app router structure in components
- Keep feature-specific code isolated

### **3. Reusability**
- Shared components for common UI elements
- Generic UI components for basic elements
- Utility functions for common operations

### **4. Type Safety**
- Comprehensive TypeScript usage
- Centralized type definitions
- Interface-based component props

### **5. Scalability**
- Modular architecture
- Clear file organization
- Consistent naming conventions

---

## 🚀 **Best Practices**

### **When Adding New Features**
1. Create route in `src/app/`
2. Add corresponding component in `src/components/features/`
3. Create API service in `src/services/routes/`
4. Add state management in `src/state/`
5. Define types in `src/types/`

### **When Adding New Components**
1. **UI Components**: Add to `src/components/ui/`
2. **Shared Components**: Add to `src/components/shared/`
3. **Feature Components**: Add to appropriate `src/components/features/[feature]/`

### **When Adding New Utilities**
1. **Firebase Utils**: Add to `src/utils/firebase/`
2. **Generic Utils**: Add to `src/utils/`
3. **API Utils**: Add to `src/services/`

### **File Placement Decision Tree**
```
Is it a page? → src/app/
Is it a feature component? → src/components/features/[feature]/
Is it a shared component? → src/components/shared/
Is it a UI component? → src/components/ui/
Is it state management? → src/state/
Is it an API service? → src/services/
Is it a utility? → src/utils/
Is it a type? → src/types/
Is it a route constant? → src/routes/
Is it a layout? → src/layouts/
Is it a style? → src/styles/
```

---

## ⚠️ **Common Mistakes to Avoid**

1. **❌ Don't put components in the wrong folder**
   - Feature components in shared folder
   - UI components in feature folder

2. **❌ Don't mix concerns**
   - API logic in components
   - UI logic in services
   - State management in utils

3. **❌ Don't create unnecessary files**
   - Empty folders
   - Duplicate functionality
   - Unused components

4. **❌ Don't ignore naming conventions**
   - Inconsistent file naming
   - Wrong file extensions
   - Non-descriptive names

5. **❌ Don't break the architecture**
   - Adding files to root directory
   - Creating circular dependencies
   - Mixing different patterns

---

This structure ensures maintainability, scalability, and developer productivity while following Next.js and React best practices.